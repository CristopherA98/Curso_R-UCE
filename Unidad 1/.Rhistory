df <- data.frame(nomb, nac, instr)
df[2, c(2,3)]
df[2, 2] # componente 2, 2
df[ , 3]="guitar" # columna 3 de df igual a "guitar"
View(df)
df[ , 3]=="guitar" # columna 3 de df igual a "guitar"
instr <- c("guitar", "bass", "guitar", "drums")
df <- data.frame(nomb, nac, instr)
df[ , 3]=="guitar" # columna 3 de df igual a "guitar"
## Información adicional
browseURL(url = "https://www.datacamp.com/community/tutorials/tutorial-on-loops-in-r",
browser = getOption("browser")) # Datacamp
browseURL(url = "https://bookdown.org/jboscomendoza/r-principiantes4/if-else.html",
browser = getOption("browser")) #bookdown
# Ejemplo 1
a <-  5
b <-  10
if (a == b){
print("a es igual a b")
}
if (a == b){
print("a es igual a b")
}
# Ejemplo 1
a <-  10
if (a == b){
print("a es igual a b")
}
a <- 7
b <- 5
if (a == b){
print("a es igual a b")
} else{
print("a es diferente de b")
}
# OJO
# La evaluacion lógica no es vectorizada.
x <- c(2, 3, -5, 6, -2, 8)
if (x > 0) {
print("positivo")
} else {
print("negativo")
}
### 1.1.3. ifelse
x <- c(2, 3, -5, 6, -2, 8)
ifelse(x > 0,"positivo","negativo")
ifelse(x > 0,"positivo","negativo")
### 1.2.2. repeat
i <- 1
repeat {
if (i > 15) break
else{
cat('\n', i, "a?os de edad")
i <- i + 1
}
}
repeat {
if (i > 15)}
repeat {
if (i > 0)}
### 1.2.2. repeat
i <- 1
if (i > 0)}
break}
## 2.1. apply
data(iris)
## 2.1. apply
data(iris)
iris <- data.frame(iris)
str(iris)
apply(X=iris,MARGIN=2,FUN = mean)
apply(X = iris[,-5],MARGIN = 2,FUN = mean)
apply(X = iris[,-5],MARGIN = 2,FUN = sum)
View(iris)
data("airquality")
force(airquality)
View(airquality)
apply(X = airquality,MARGIN = 2,FUN = mean)
apply(X = airquality,MARGIN = 2,FUN = mean,na.rm=T)
is.na(iris[,1])
is.na(airquality$Ozone)
sum(is.na(airquality$Ozone))
which(is.na(airquality$Solar.R))
avg <- function (x) {
(min(x) + max(x)) / 2}
avg <- function (x) {
(min(x) + max(x)) / 2
}
resultado <- sapply (iris[,-5], avg)
resultado
asa.data <- read.csv("Datasets/ASA_pasajeros.csv")
View(asa.data)
lapply(asa.data,class)# Observar el tipo de datos de cada variable
str(asa.data)
asa.data$Estado
unique(asa.data$Estado) #unique permite saber los valores sin repetición de una variable de tipo factor
sum(asa.data$Pasajeros.nacionales)  #suma de pasajeros nacionales
colnames(asa.data) # nombres de las vriables
asa.pasajeros <- asa.data[,c("Pasajeros.nacionales" ,"Pasajeros.internacionales")]
View(asa.pasajeros)
asa.pasajeros <- asa.data[,c("Pasajeros.nacionales" ,"Pasajeros.internacionales")]
View(asa.pasajeros)
lapply(asa.pasajeros,sum)
total <- sapply(asa.pasajeros,sum)
total
sum(total) # total de pasajeros sumados tanto internacional como nacionales
attach(asa.data) # acceder más facilmente a la base de datos
tapply(asa.data$Pasajeros.nacionales,asa.data$Estado,mean)
Anio.mes
tapply(Pasajeros.nacionales,Estado,sum)
library(swirl)
install.packages("swirl")
library(swirl)
library(swirl)
auto <- read.csv("Datasets/U1/auto-mpg.csv",
header = TRUE, sep = ",",
na.strings = "",
stringsAsFactors = FALSE)
names(auto)
View(auto)
str(auto)
auto <- read.csv("Datasets/U1/auto-mpg.csv",
header = TRUE, sep = ",",
na.strings = "",
stringsAsFactors = T)
str(auto)
auto_no_header <- read.csv("Datasets/U1/auto-mpg-noheader.csv", header = FALSE)
View(auto_no_header)
head(auto_no_header, 4)
auto_no_sense <- read.csv("Datasets/U1/auto-mpg-noheader.csv")
head(auto_no_sense, 4)
View(auto_no_sense)
auto_custom_header <-
read.csv("Datasets/U1/auto-mpg-noheader.csv",
header = F,
col.names = c("numero", "millas_por_galeon", "cilindrada",
"desplazamiento", "caballos_de_potencia",
"peso", "aceleracion", "año", "modelo"
)
)
head(auto_custom_header, 2)
library(XML)
url <- "Datasets/U1/cd_catalog.xml"
xmldoc <- xmlParse(url) #XMLInternalDocument
rootnode
xmldoc
rootnode <- xmlRoot(xmldoc)
rootnode
rootnode[2]
rootnode[1]
# x es cada uno de los elementos del nodo raiz
cds_data <- xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue) )
View(cds_data)
cds.catalog <- data.frame(t(cds_data), row.names = NULL)
head(cds.catalog, 2)
View(cds.catalog)
cds.catalog[1:5,]
dat.1 <- fromJSON("Datasets/U1/students.json")
library(jsonlite)
library(curl)
dat.1 <- fromJSON("Datasets/U1/students.json")
dat.2 <- fromJSON("Datasets/U1/student-courses.json")
url <- "http://www.floatrates.com/daily/usd.json"
currencies <- fromJSON(url)
View(dat.1)
View(currencies)
# Acceder a un elemento de un JSON
currency.data <- currencies$eur
head(dat.1, 3)
View(dat.1)
dat.1$Email
currency.data[1:5,1:2]
View(currencies)
View(currency.data)
View(currency.data)
View(currencies)
View(currency.data)
# Acceder a un elemento de un JSON
currency.data <- currencies$eur$code
# Acceder a un elemento de un JSON
currency.data <- currencies
# Acceder a un elemento de un JSON
currency.data <- currencies$eur
View(currency.data)
population_url <- "Datasets/U1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(population_url)
View(tables)
most_populated <- tables[[6]]
View(most_populated)
population_url <- "Datasets/U1/WorldPopulation-Wikipedia.html"
population_url <- "Datasets/U1/WorldPopulation_Wikipedia.html"
View(most_populated)
tables <- readHTMLTable(population_url)
library(xml)
install.packages("xml")
library(XML)
population_url <- "Datasets/U1/World population_Wikipedia.html"
tables <- readHTMLTable(population_url)
population_url <- "Datasets/U1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(population_url)
most_populated <- tables[[6]]
head(most_populated, 3)
custom_table <- readHTMLTable(population_url, which = 6)
View(custom_table)
most_populated <- tables[[8]]
View(most_populated)
compras <- fromJSON("Datasets/U1/compras.json")
View(compras)
data <- compras$releases$id
data <- compras$releases$contracts
View(data)
data <- unlist(data)
unlist(data)
data <- data[[1]]
dat.1 <- fromJSON("Datasets/U1/students.json")
View(dat.1)
packages <- c('tidyverse','readxl','haven','easypackages','strings','writexl')
library(easypackages)
libraries(packages)
?read_csv
getwd()
data_asa <- read_csv("Datasets/ASA_pasajeros.csv")
View(data_asa)
auto <- read.csv("Datasets/U1/auto-mpg.csv",
header = TRUE, sep = ",",
na.strings = "",
stringsAsFactors = FALSE)
str(auto)
auto <- read.csv("Datasets/U1/auto-mpg.csv",
header = TRUE, sep = ",",
na.strings = "",
stringsAsFactors = TRUE)
str(auto)
auto <- read.csv("Datasets/U1/auto-mpg.csv",
header = TRUE, sep = ",",
na.strings = "",
stringsAsFactors = FALSE)
auto_no_header <- read.csv("Datasets/U1/auto-mpg-noheader.csv", header = FALSE)
head(auto_no_header, 4)
auto_no_sense <- read.csv("Datasets/U1/auto-mpg-noheader.csv")
head(auto_no_sense, 4)
auto_custom_header <-
read.csv("Datasets/U1/auto-mpg-noheader.csv",
header = F,
col.names = c("numero", "millas_por_galeon", "cilindrada",
"desplazamiento", "caballos_de_potencia",
"peso", "aceleracion", "año", "modelo"
)
)
head(auto_custom_header, 2)
## 1.2. Base de datos de tipo '.xls y .xlsx'
excel_sheets("Datasets/data_bikes/bikes.xlsx") # sirve para saber el nombre de las hojas dentro del archivo excel
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
View(bdd_bikes)
ejemplo <- read_excel("Datasets/data_bikes/bikes.xlsx",sheet = "Ejemplo")
View(ejemplo)
### Ahora si deseo cargar las distintas hojas del mismo archivo excel em
### dataframes diferentes.
data_list <- excel_sheets("Datasets/data_bikes/bikes.xlsx")
list <- lapply(data_list, function(data_list) read_excel("Datasets/data_bikes/bikes.xlsx",
sheet = data_list))
View(list)
names(list) <- data_list
list2env(list,envir = .GlobalEnv)
View(Sheet1)
View(Ejemplo)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx",sheet = "Sheet1",split = 5)
## 1.2. Base de datos de tipo '.xls y .xlsx'
?read_excel
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx",sheet = "Sheet1",skip  = 5)
View(bdd_bikes)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx",sheet = "Sheet1",skip  = 5,header = F)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx",sheet = "Sheet1",skip  = 5,header = F)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx",sheet = "Sheet1",skip  = 5,col_names = F)
bdd_personas <- read_sav("Datasets/SPSS_enemdu_201912/enemdu_persona_201912.sav")
save.image("~/GitHub/Curso_R-UCE/Unidad 1/Datasets/data_borrador.RData")
load("Datasets/BiciQ.RData") %>% data.frame()
load("Datasets/BiciQ.RData") %>% data.frame()
library(XML)
url <- "Datasets/U1/cd_catalog.xml"
# Crea una posicion que localiza el documento
xmldoc <- xmlParse(url) #XMLInternalDocument
# Recuperamos en nodo raiz / origen de origen
rootnode <- xmlRoot(xmldoc)
rootnode[1]
rootnode[2]
# x es cada uno de los elementos del nodo raiz
cds_data <- xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue) )
View(cds_data)
View(cds_data)
cds.catalog <- data.frame(t(cds_data), row.names = NULL)
View(cds.catalog)
head(cds.catalog, 2)
head(cds.catalog, 10)
cds.catalog[1:5,]
population_url <- "Datasets/U1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(population_url)
View(tables)
View(tables)
most_populated <- tables[[6]]
View(most_populated)
head(most_populated, 3)
custom_table <- readHTMLTable(population_url, which = 6)
View(custom_table)
library(jsonlite)
library(curl)
dat.1 <- fromJSON("Datasets/U1/students.json")
dat.2 <- fromJSON("Datasets/U1/student-courses.json")
View(dat.1)
dat.1$Email
df1 <- data.frame(A= 1:3, B= letters[1:3])
df2 <- data.frame(A= 1:4, B= letters[1:4])
View(df1)
View(df2)
resultado <- rbind(df1,df2)
resultado
df1 <- data.frame(A= 1:3, B= letters[1:3])
df2 <- data.frame(X= 1:3, Y= letters[1:3])
resultado <- cbind(df1,df2)
resultado
bdd_1 <- data.frame(id=(1:5),costo=seq(100,104))
bdd_1 <- data.frame(id=(1:5),costo=seq(100,104))
bdd_2 <- data.frame(id=seq(2,10,2),producto=letters[1:5])
View(bdd_1)
View(bdd_2)
View(bdd_1)
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id") # usando funcion merge
bdd_inner
bdd_inner1 <- bdd_1 %>% inner_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner1
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all = TRUE) # usando funcion merge
bdd_inner
bdd_inner1 <- bdd_1 %>% full_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner1
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.x = TRUE) # usando funcion merge
bdd_inner
bdd_inner1 <- bdd_1 %>% left_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner1
bdd_inner <- merge(x = bdd_1, y = bdd_2,by = "id",all.y = TRUE) # usando funcion merge
bdd_inner
bdd_inner1 <- bdd_1 %>% right_join(bdd_2,by = "id") # usando funcion inner_join
bdd_inner1
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
View(bdd_bikes)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
View(bdd_shop)
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
View(bdd_orders)
## 3.1. Vista de los datos
str(bdd_bikes)
glimpse(bdd_bikes)
bdd_orders %>% left_join(bdd_bikes,by = c("product.id" = "bike.id"))
d1 <- bdd_orders %>% left_join(bdd_bikes,by = c("product.id" = "bike.id"))
View(d1)
bike_final <- bdd_orders %>%
left_join(bdd_bikes,by = c("product.id" = "bike.id")) %>%
left_join(bdd_shop,by = c("customer.id" = "bikeshop.id"))
View(bike_final)
bike_final %>%  glimpse()
glimpse(bke_final)
glimpse(bike_final)
fs::dir_create("Datasets/Base Final")
### 3.3.1. Excel
bike_final %>%
write_xlsx("Datasets/Base Final/bike_final.xlsx")
### 3.3.2. CSV
bike_final %>%
write_xlsx("Datasets/Base Final/bike_final.csv")
bike_final %>% write_sav("Datasets/Base Final/bike_final.sav")
browseURL(url = "https://www.datasciencemadesimple.com/join-in-r-merge-in-r/",
browser = getOption("browser"))
rm(list = ls())
personas <- read_sav("Datasets/SPSS_enemdu_201912/enemdu_persona_201912.sav")
library(haven)
personas <- read_sav("Datasets/SPSS_enemdu_201912/enemdu_persona_201912.sav")
hogar <- read_sav("Datasets/SPSS_enemdu_201912/enemdu_viv_hog_201912.sav")
View(personas)
names(personas)
View(hogar)
names(hogares)
names(hogar)
join <- merge(personas, hogares, by=c("upm","id_vivienda","id_hogar"),all = TRUE)
join <- merge(personas, hogar, by=c("upm","id_vivienda","id_hogar"),all = TRUE)
View(personas)
names(join)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
library(readxl)
bdd_bikes <- read_excel("Datasets/data_bikes/bikes.xlsx")
bdd_shop <- read_excel("Datasets/data_bikes/bikeshops.xlsx")
bdd_orders <- read_excel("Datasets/data_bikes/orderlines.xlsx")
## 3.1. Vista de los datos
str(bdd_bikes)
glimpse(bdd_bikes)
## 3.2. Unir datos
?left_join
d1 <- bdd_orders %>% left_join(bdd_bikes,by = c("product.id" = "bike.id"))
library(dplyr)
d1 <- bdd_orders %>% left_join(bdd_bikes,by = c("product.id" = "bike.id"))
View(d1)
join <- merge(personas, hogar, by.x =c("upm","id_vivienda","id_hogar"),
by.y ==c("upm","id_vivienda","id_hogar") ,
all = TRUE)
personas <- read_sav("Datasets/SPSS_enemdu_201912/enemdu_persona_201912.sav")
hogar <- read_sav("Datasets/SPSS_enemdu_201912/enemdu_viv_hog_201912.sav")
names(personas)
names(hogar)
join <- merge(personas, hogar, by.x =c("upm","id_vivienda","id_hogar"),
by.y ==c("upm","id_vivienda","id_hogar") ,
all = TRUE)
join <- merge(personas, hogar, by.x =c("upm","id_vivienda","id_hogar"),
by.y =c("upm","id_vivienda","id_hogar") ,
all = TRUE)
View(join)
join <- merge(personas, hogar, by =c("id_vivienda","id_hogar"),
all.x = TRUE)
View(join)
names(join)
join <- merge(personas, hogar, by =c("id_vivienda","id_hogar"),
all.y = TRUE)
names(join)
View(join)
names(personas)
names(hogar)
"periodo")
join1 <- personas %>% left_join(hogar,by= c("area","ciudad","conglomerado",
"panelm","vivienda","hogar","estrato",
"fexp","upm","id_vivienda","id_hogar",
"periodo"))
join <- merge(personas, hogar, by= c("area","ciudad","conglomerado",
"panelm","vivienda","hogar","estrato",
"fexp","upm","id_vivienda","id_hogar",
"periodo"),
all.x = TRUE)
View(join)
glimpse(personas)
glimpse(hogar)
join <- merge(personas, hogar, by= c("area","ciudad","conglomerado",
"panelm","vivienda","hogar","estrato",
"fexp","upm","id_vivienda","id_hogar",
"periodo"),
all.x = TRUE)
names(join)
View(join)
View(join)
print_labels(join$vi02)
View(hogar)
View(hogar)
print_labels(hogar$vi05a)
print_labels(hogar$vi04a)
dim1 <- hogar %>%
filter(vi02 %in% 1:8, #print_labels(hogar$vi02)
#1.1. Material predominante de las paredes
(vi05a %in% 5:7 | #print_labels(hogar$vi05a);print_labels(hogar$vi04a)
#1.2. Material predominante de las piso
vi04a %in% 6:7)) %>%
select(area,ciudad,conglomerado,
panelm,vivienda,hogar,estrato,
fexp,upm,id_vivienda,id_hogar, vi02,vi05a,vi04a) %>%
mutate(dim1 = 1)
View(dim1)
rm(list = ls())
library(haven)
BDD_201012 <- read_dta("~/Tesis Henry/Join/BDD_201012.dta")
View(BDD_201012)
BDD_201012 <- read_dta("~/Tesis Henry/Join/BDD_2010.dta")
BDD_2010 <- read_dta("~/Tesis Henry/Join/BDD_2010.dta")
data1 <- BDD_2010 %>% select(area,p63 ,p66, p68b, p69, p71b, p72b, p73b, p74b, desem,
alb, inadecuado, estable, edujefe, educony, viv, inter)
# Gráficos y tratamiento de datos
# ==============================================================================
library(tidyverse)
data1 <- BDD_2010 %>% select(area,p63 ,p66, p68b, p69, p71b, p72b, p73b, p74b, desem,
alb, inadecuado, estable, edujefe, educony, viv, inter)
data1 <- BDD_2010 %>% select(area,p63 ,p66, p68b, p69, p71b, p72b, p73b, p74b, desem,
alb, inadecuado, estable, edujefe, educony, viv, inter,score)
modelo <- lm(score ~ ., data = data1)
summary(modelo)
# Creación y entrenamiento del modelo
# ==============================================================================
modelo <- step(
object    = lm(formula = score ~ ., data = data1),
direction = "backward",
scope     = list(upper = ~., lower = ~1),
trace     = FALSE
)
is.na(data1)
sum(is.na(data1))
View(data1)
View(BDD_201012)
View(BDD_201012)
View(BDD_2010)
View(data1)
data1 <- BDD_2010 %>% select(area,p63 ,p66, p68b, p69, p71b, p72b, p73b, p74b, desem,
alb, inadecuado, estable, edujefe, educony, viv, inter,score,
p03)
View(data1)
data1 <- BDD_2010 %>% select(area,p63 ,p66, p68b, p69, p71b, p72b, p73b, p74b, desem,
alb, inadecuado, estable, edujefe, educony, viv, inter,score)
modelo <- lm(score ~ ., data = data1)
summary(modelo)
cor(data1)
cor(data1,na.rm=TRUE)
?cor
cor(data1)
apply(X = data1, MARGIN = 2, FUN = var(data1,na.rm = T))
apply(X = data1, MARGIN = 2, FUN = var(na.rm = T))
apply(X = data1, MARGIN = 2, FUN = var(data1,na.rm = T))
apply(X = data1, MARGIN = 2, FUN = var,na.rm=T)
apply(X = data1, MARGIN = 2, FUN = mean,na.rm=T)
