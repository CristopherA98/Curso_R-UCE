geom_boxplot()
mean(numeric_data$V13)
mean(Ozone_IQR$V13)
mean(outliers_missing$V13)
mean(outliers_missing$V13,na.rm = T)
mean(numeric_data$V13)
View(Ozone_knn)
View(outliers_missing)
x <- c(1,2,5,8,9,NA)
is.na(x) # devuleve una respuesta de tipo buleana donde TRUE muestra la presencia de NA's
which(is.na(x)) # posición de los valores perdidos
data(algae)
glimpse(algae)
is.na(algae)
which(is.na(algae))
sum(is.na(algae))
which(is.na(algae[,]))
which(is.na(ncol(algae)))
sum(is.na(algae))# suma de valores perdidos dentro de la data
algae %>%
is.na() %>%
reshape2::melt() %>%
ggplot(aes(Var2, Var1, fill=value)) +
geom_raster() +
coord_flip() +
scale_y_continuous(NULL, expand = c(0, 0)) +
scale_fill_grey(name = "",
labels = c("Present",
"Missing")) +
labs(title = "Valores perdidos",
x="Observaciones",
y="Varibales")+
theme(axis.text.y  = element_text(size = 10))
sapply(algae,function(x){sum(is.na(x))}) # número de NA´s en la columnas
round((apply(apply(X = algae,MARGIN = 2,FUN = is.na )
,MARGIN=2,FUN=sum)/nrow(algae))*100,2)
data.cleaning <- algae[!is.na(algae$Chla),]
complete.cases(algae)
data.cleaning2 <- algae[complete.cases(algae),]
mean(algae$Chla,na.rm = T)
algae$Chla_mean <- impute(algae$Chla, mean)
algae$Chla_random <- impute(algae$Chla,random)
algae$Chla_random <- impute(algae$Chla,'random')
median(algae$Chla,na.rm = T)
algae$Chla_median <- impute(algae$Chla,median)
which(is.na(algae$Chla))
algae[56,]
### 1.1.2. Paquete mice
misDf<-misDf<-algae[,colSums(is.na(algae))>0]
misDf
missmap(misDf)
### 1.1.2. Paquete mice
algae <- algae<-algae[,colSums(is.na(algae))>0]
imputed_Data <- mice(algae, m=5, maxit = 50, method = 'pmm', seed = 500)
algae_mice <- complete(imputed_Data,2)
sapply(algae_mice,function(x){sum(is.na(x))})
algae_mice[56,]
### 1.1.1. Paquete DWwR
algae_knn<-knnImputation(algae)
sapply(algae_mice,function(x){sum(is.na(x))})
### 1.1.2. Paquete mice
algae<-algae[,colSums(is.na(algae))>0]
imputed_Data <- mice(algae, m=5, maxit = 8, method = 'pmm', seed = 500)
algae[,colSums(is.na(algae))>0]
algae_mice <- complete(imputed_Data,2)
sapply(algae_mice,function(x){sum(is.na(x))})
algae_mice[56,]
### 1.1.1. Paquete DWwR
algae_knn<-knnImputation(algae)
sapply(algae_mice,function(x){sum(is.na(x))})
data (Ozone, package="mlbench")
glimpse(Ozone)
sapply(Ozone,function(x){sum(is.na(x))})
data (Ozone, package="mlbench")
ne, package="mlbench")
sapply(Ozone,function(x){sum(is.na(x))})
outliers<-function(x){
IQR <- quantile(x, probs=c(.25, .75), na.rm = T)
ext <- quantile(x, probs=c(.05, .95), na.rm = T)
H <- 1.5 * IQR(x, na.rm = T)
x[x < (IQR[1] - H)] <- ext[1]
x[x > (IQR[2] + H)] <- ext[2]
return(x)}
# Solo variables numeric
numeric_cols <-names(Ozone)[sapply(Ozone, is.numeric)]
numeric_data<-Ozone[,names(Ozone)%in% numeric_cols]
Ozone_IQR<- data.frame(sapply(numeric_data,outliers))
ggplot(numeric_data,aes(x=V13))+
geom_boxplot()
ggplot(Ozone_IQR,aes(x=V13))+
geom_boxplot()
sapply(Ozone,function(x){sum(is.na(x))})
sapply(Ozone_IQR,function(x){sum(is.na(x))})
mean(numeric_data$V13)
mean(Ozone_IQR$V13)
algae<-algae[,colSums(is.na(algae))>0]
Ozone_IQR<-Ozone_IQR[,colSums(is.na(Ozone_IQR))>0]
Ozone_knn<-knnImputation(outliers_missing) # metodo knn
Ozone_knn<-knnImputation(Ozone_IQR) # metodo knn
sapply(Ozone,function(x){sum(is.na(x))})
sapply(Ozone_knn,function(x){sum(is.na(x))})
outliers<-function(x){
IQR <- quantile(x, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(x, na.rm = T)
x[x < (IQR[1] - H)] <- NA
x[x > (IQR[2] + H)] <- NA
return(x)}
numeric_cols<-names(Ozone)[sapply(Ozone, is.numeric)]
numeric_data<-Ozone[,names(Ozone)%in% numeric_cols]
outliers_missing <-data.frame(sapply(numeric_data,outliers))
# Gráfico con data normal
ggplot(numeric_data,aes(x=V13))+
geom_boxplot()
ggplot(outliers_missing,aes(x=V13))+
geom_boxplot()
# Imputar valores NA
outliers_missing<-outliers_missing[,colSums(is.na(outliers_missing))>0]
Ozone_knn<-knnImputation(outliers_missing)
mean(numeric_data$V13)
Ozone_knn<-knnImputation(outliers_missing)
sapply(Ozone_knn,function(x){sum(is.na(x))})
mean(numeric_data$V13)
mean(outliers_missing$V13,na.rm = T)
mean(Ozone_knn$V13,na.rm = T)
mean(numeric_data$V13)
mean(Ozone_knn$V13,na.rm = T)
data(algae)
glimpse(algae)
### 1.1.2. Paquete mice
algae<-algae[,colSums(is.na(algae))>0]
imputed_Data <- mice(algae, m=5, maxit = 8, method = 'pmm', seed = 500)
algae_mice <- complete(imputed_Data,2)
sapply(algae_mice,function(x){sum(is.na(x))})
algae_mice[56,]
### 1.1.2. Paquete mice
algae<-algae[,colSums(is.na(algae))>0]
imputed_Data <- mice(algae, m=5, maxit = 8, method = 'pmm', seed = 500)
algae_mice <- complete(imputed_Data,2)
sapply(algae_mice,function(x){sum(is.na(x))})
algae_mice <- algae[,names(algae)%in% algae_mice]
### 1.1.2. Paquete mice
algae<-algae[,colSums(is.na(algae))>0]
imputed_Data <- mice(algae, m=5, maxit = 8, method = 'pmm', seed = 500)
algae_mice <- complete(imputed_Data,2)
sapply(algae_mice,function(x){sum(is.na(x))})
data(algae)
packages <- c('tidyverse','ggplot2','visdat','caret','recipes',
'mice','Hmisc','DMwR')
libraries(packages)
data(algae)
ggpairs(data_venta_publicidad, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none")
paquetes <- c('tidyverse','GGally','openxlsx','MASS','hexbin','modelr','lmtest',
'car','boot','leaps')
libraries(paquetes)
library(easypackages)
libraries(paquetes)
data_venta_publicidad <- read.xlsx("Datasets/Venta_vs_Publicidad.xlsx", detectDates = TRUE)
str(data_venta_publicidad)
data_venta_publicidad <- tibble::as.tibble( data_venta_publicidad)
data_venta_publicidad %>%
ggplot(., aes(PUBLICIDAD_TOTAL, VENTA)) +
geom_point()
ggpairs(data_venta_publicidad, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none")
data_venta_publicidad %>% select_if(is.numeric) %>% as.data.frame %>% ggscatmat
ggpairs(data_venta_publicidad, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none")
colSums(is.na(algae))
packages <- c('tidyverse','ggplot2','visdat','caret','recipes',
'mice','Hmisc','DMwR')
library(easypackages)
libraries(packages)
data(algae)
glimpse(algae)
colSums(is.na(algae))
sapply(algae,function(x){sum(is.na(x))}) # número de NA´s en la columnas
colSums(is.na(algae))
### 1.1.2. Paquete mice
imputed<-algae[,colSums(is.na(algae))>0]
View(imputed)
imputed_Data <- mice(imputed, m=5, maxit = 8, method = 'pmm', seed = 500)
algae_mice <- complete(imputed_Data,2)
View(algae_mice)
sapply(algae_mice,function(x){sum(is.na(x))})
algae_mice[56,]
algae[56,]
View(algae_mice)
algae$mxPH <- algae_mice$mxPH
View(algae)
sapply(algae,function(x){sum(is.na(x))})
paquetes <- c('tidyverse','GGally','openxlsx','MASS','hexbin','modelr','lmtest',
'car','boot','leaps')
library(easypackages)
libraries(paquetes)
data_venta_publicidad <- read.xlsx("Datasets/Venta_vs_Publicidad.xlsx", detectDates = TRUE)
data_venta_publicidad <- tibble::as.tibble( data_venta_publicidad)
data_venta_publicidad
data_venta_publicidad %>%
ggplot(., aes(PUBLICIDAD_TOTAL, VENTA)) +
geom_point()
ggpairs(data_venta_publicidad, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none")
data_venta_publicidad %>%
ggplot(., aes(PUBLICIDAD_TOTAL, VENTA)) +
geom_point()
ggpairs(data_venta_publicidad, lower = list(continuous = "smooth"),
diag = list(continuous = "barDiag"), axisLabels = "none")
# Estimación
mod_1 <- lm(VENTA ~ PUBLICIDAD_TOTAL, data = data_venta_publicidad)
View(mod_1)
summary(mod_1)
## Crea una tabla de datos base para predecir
grid <- data_venta_publicidad %>%
data_grid(PUBLICIDAD_TOTAL)
View(grid)
View(data_venta_publicidad)
## Agrega predicciones
grid <- grid %>%
add_predictions(mod_1, var = 'PREDIC')
View(grid)
data_venta_publicidad %>%
ggplot(., aes(x= PUBLICIDAD_TOTAL)) +
geom_point(aes(y= VENTA))
## Graficar
data_venta_publicidad %>%
ggplot(., aes(x= PUBLICIDAD_TOTAL)) +
geom_point(aes(y= VENTA)) +
geom_line(aes(y= PREDIC), data = grid, colour = "red", size = 1) +
ggtitle("Datos + predicción")
data_venta_publicidad <- data_venta_publicidad %>%
add_residuals(mod_1, var = 'RESIDUALES')
View(data_venta_publicidad)
head(data_venta_publicidad, 5)
## Explorar los residuales
ggplot(data_venta_publicidad, aes(RESIDUALES)) +
geom_freqpoly()
## Gráfico qq
mod_1 %>%
ggplot(., aes(qqnorm(.stdresid)[[1]], .stdresid)) +
geom_point(na.rm = TRUE) +
geom_abline() +
xlab("Theoretical Quantiles") +
ylab("Standardized Residuals") +
ggtitle("Normal Q-Q")
# Si tuviésemos pocos datos
shapiro.test(data_venta_publicidad$RESIDUALES)
# Test KS
ks.test(data_venta_publicidad$RESIDUALES, "pnorm")
# Podemos utilizar los residuos studentizados
data_venta_publicidad$STUDRESIDUAL <- studres(mod_1)
View(data_venta_publicidad)
# Test KS
ks.test(data_venta_publicidad$STUDRESIDUAL, "pnorm")
## Explorar la varianza
ggplot(data_venta_publicidad, aes(PUBLICIDAD_TOTAL, RESIDUALES)) +
geom_ref_line(h = 0) +
geom_point() +
ggtitle("Residuos")
## Prueba de homocedasticidad
bptest(mod_1)
# Correlacion
## Grafico ACF
acf( residuals( mod_1))
# H0: La autocorrelación de los residuos es 0 vs
# H1: La autocorrelación de los residuos es diferente de 0
dwtest(mod_1,alternative = "two.side")
mod_1a <- lm(VENTA ~ log(PUBLICIDAD_TOTAL), data = data_venta_publicidad)
summary(mod_1a)
## Crea una tabla de datos base para predecir
grid <- data_venta_publicidad %>%
data_grid(PUBLICIDAD_TOTAL)
## Agrega predicciones
grid <- grid %>%
add_predictions(mod_1a, var = 'PREDIC')
## Graficar
data_venta_publicidad %>%
ggplot(., aes(x= PUBLICIDAD_TOTAL)) +
geom_point(aes(y= VENTA)) +
geom_line(aes(y= PREDIC), data = grid, colour = "red", size = 1) +
ggtitle("Datos + predicción")
bptest(mod_1a)
## Predecir con el primer modelo
predict(mod_1, newdata = data.frame(PUBLICIDAD_TOTAL= 2000))
View(grid)
grid %>% filter(PUBLICIDAD_TOTAL== 2000)
## Predecir con el modelo transformado
predict(mod_1a, newdata = data.frame(PUBLICIDAD_TOTAL= 2000))
library(dbplyr)
library(dplyr, warn.conflicts = FALSE)
a
lf <- lazy_frame(g = 1, a = 1, b = 2, c = 3)
lf %>%
group_by(g) %>%
summarise(across(everything(), mean, na.rm = TRUE))
lf <- lazy_frame(x1 = 1, x2 = 2, x3 = 3, y1 = 4, y2 = 3)
lf %>% select(starts_with("x") & !"x3")
lf %>% select(ends_with("2") | ends_with("3"))
shiny::runApp('Clases/C1-8/Ejemplo')
install.packages("highcharter")
runApp('Clases/C1-8/Ejemplo')
# descarga de archivo
datos <- read.xlsx(
"http://www.arcotel.gob.ec/wp-content/uploads/2018/11/1.2-Radiobases-por-operador-y-tecnologia-nivel-provincial_Jul-2019.xlsx",
sheet = "RBSxPARROQUIAHISTORICO", startRow = 12)
datos <- read.xlsx(
"http://www.arcotel.gob.ec/wp-content/uploads/2018/11/1.2-Radiobases-por-operador-y-tecnologia-nivel-provincial_Jul-2019.xlsx",
sheet = "RBSxPARROQUIAHISTORICO", startRow = 12)
runApp('Clases/C1-8/Ejemplo')
library(tidyverse)
attach(datos)
knitr::opts_chunk$set(echo = TRUE)
![UCE](logo_UCE.png)
![imagen](logo_UCE.png)
[imagen](logo_UCE.png)
![](logo_UCE.png)
getwd()
setwd("~/GitHub/Curso_R-UCE/Unidad 1/Clases/C1-1")
!["imagen"](logo_UCE.png)
<p> ![imagen](/logo_UCE.png)
runApp('~/GitHub/Curso_R-UCE/Unidad 1/Clases/C1-8/Ejemplo/CLASE8')
runApp('~/GitHub/Curso_R-UCE/Unidad 1/Clases/C1-8/Ejemplo')
# Instalacion multiples paquetes
packages <- c("ggplot2","lubridate","readr")
install.packages(packages)
library(easypackages)
libraries(packages)
source('~/GitHub/Curso_R-UCE/Unidad 1/Clases/C1-1/C01-Introduccion.R', encoding = 'UTF-8', echo=TRUE)
install.packages(packages)
#----- Vectores
a <- 250
typeof(a)
length(a)
#----- Vectores
a <- 250
# Para probar que una estructura de datos es un vector (atómico o lista)
# se utiliza la función:
is.vector(a)
#----- Vectores atómicos
dbl_var <- c(1, 2, -1)
int_var <- c(3L, 7L, 1L) # con el sufijo L se declaran números enteros
log_var <- c(FALSE, TRUE, F, T) # TRUE y FALSE (T, F) se usan para crear
chr_var <- c("Source", "Stat", "Lab")
# tercera componente de dbl_var
dbl_var[3]
c(1, c(2, c(3,4))) ; c(1, 2, 3, 4,5) # los vectores pueden ser anidados
# Dado un vector se puede determinar su tipo con typeof()
# o verificar un tipo específico con una “is” función:
dbl_var <- c(1, 2, -1)
typeof(dbl_var)
is.double(dbl_var)
x <- c(FALSE, TRUE, FALSE, TRUE)
as.numeric(x) # TRUE coerciona a 1 y FALSE a 0
sum(x) # número total de TRUEs
mean(x) # proporción de TRUEs
x <- list(1:3, c("Source", "Stat", "Lab"), c(TRUE, FALSE), c(1.3, 4.5))
View(x)
str(x)
is.atomic(x)
typeof(x)
# probamos si x es una lista
is.list(x)
# pasamos a vector considerando las reglas de coerción
unlist(x)
# pasamos a vector considerando las reglas de coerción
a <- unlist(x)
x <- list(1:3, c("Source", "Stat", "Lab"), nomb_obj=c(TRUE, FALSE), c(1.3, 4.5))
x$nomb_obj
# Elementos de una matriz
# Columnas 2 y 4
mtx <- matrix (1:12, nrow=3, ncol=4, byrow=FALSE)
mtx[,c(2,4)]
mtx
mtx[1,3]
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
# Ejemplo más ilustrativo
x<-array(c(45,46,65,55,170,167,48,49,68,56,169,165),c(2,3,2))
dimnames(x)<-list(c("hombres","mujeres"),c("edad","peso","altura"),
c("Sur","Norte"))
x
# Elementos de un arrays
x[,,"Sur"]
x["hombres",,]
dbl_vec <- c(1, 2, 3)
chr_vec <- c("R", "S", "T")
log_vec <- c(TRUE, FALSE, TRUE)
log_vec <- c(TRUE, FALSE)
# Cremos el dataframe
df <- data.frame(dbl_vec, chr_vec, log_vec)
log_vec <- c(TRUE, FALSE,TRUE)
# Cremos el dataframe
df <- data.frame(dbl_vec, chr_vec, log_vec)
View(df)
df
nomb <- c("John", "Paul", "George", "Ringo")
nac <- c(1940, 1941, 1943, 1940)
instr <- c("guitar", "bass", "guitar", "drums")
df <- data.frame(nomb, nac, instr)
df[2, c(2,3)]
df[2, 2] # componente 2, 2
df[ , 3]="guitar" # columna 3 de df igual a "guitar"
View(df)
df[ , 3]=="guitar" # columna 3 de df igual a "guitar"
instr <- c("guitar", "bass", "guitar", "drums")
df <- data.frame(nomb, nac, instr)
df[ , 3]=="guitar" # columna 3 de df igual a "guitar"
## Información adicional
browseURL(url = "https://www.datacamp.com/community/tutorials/tutorial-on-loops-in-r",
browser = getOption("browser")) # Datacamp
browseURL(url = "https://bookdown.org/jboscomendoza/r-principiantes4/if-else.html",
browser = getOption("browser")) #bookdown
# Ejemplo 1
a <-  5
b <-  10
if (a == b){
print("a es igual a b")
}
if (a == b){
print("a es igual a b")
}
# Ejemplo 1
a <-  10
if (a == b){
print("a es igual a b")
}
a <- 7
b <- 5
if (a == b){
print("a es igual a b")
} else{
print("a es diferente de b")
}
# OJO
# La evaluacion lógica no es vectorizada.
x <- c(2, 3, -5, 6, -2, 8)
if (x > 0) {
print("positivo")
} else {
print("negativo")
}
### 1.1.3. ifelse
x <- c(2, 3, -5, 6, -2, 8)
ifelse(x > 0,"positivo","negativo")
ifelse(x > 0,"positivo","negativo")
### 1.2.2. repeat
i <- 1
repeat {
if (i > 15) break
else{
cat('\n', i, "a?os de edad")
i <- i + 1
}
}
repeat {
if (i > 15)}
repeat {
if (i > 0)}
### 1.2.2. repeat
i <- 1
if (i > 0)}
break}
## 2.1. apply
data(iris)
## 2.1. apply
data(iris)
iris <- data.frame(iris)
str(iris)
apply(X=iris,MARGIN=2,FUN = mean)
apply(X = iris[,-5],MARGIN = 2,FUN = mean)
apply(X = iris[,-5],MARGIN = 2,FUN = sum)
View(iris)
data("airquality")
force(airquality)
View(airquality)
apply(X = airquality,MARGIN = 2,FUN = mean)
apply(X = airquality,MARGIN = 2,FUN = mean,na.rm=T)
is.na(iris[,1])
is.na(airquality$Ozone)
sum(is.na(airquality$Ozone))
which(is.na(airquality$Solar.R))
avg <- function (x) {
(min(x) + max(x)) / 2}
avg <- function (x) {
(min(x) + max(x)) / 2
}
resultado <- sapply (iris[,-5], avg)
resultado
asa.data <- read.csv("Datasets/ASA_pasajeros.csv")
View(asa.data)
lapply(asa.data,class)# Observar el tipo de datos de cada variable
str(asa.data)
asa.data$Estado
unique(asa.data$Estado) #unique permite saber los valores sin repetición de una variable de tipo factor
sum(asa.data$Pasajeros.nacionales)  #suma de pasajeros nacionales
colnames(asa.data) # nombres de las vriables
asa.pasajeros <- asa.data[,c("Pasajeros.nacionales" ,"Pasajeros.internacionales")]
View(asa.pasajeros)
asa.pasajeros <- asa.data[,c("Pasajeros.nacionales" ,"Pasajeros.internacionales")]
View(asa.pasajeros)
lapply(asa.pasajeros,sum)
total <- sapply(asa.pasajeros,sum)
total
sum(total) # total de pasajeros sumados tanto internacional como nacionales
attach(asa.data) # acceder más facilmente a la base de datos
tapply(asa.data$Pasajeros.nacionales,asa.data$Estado,mean)
Anio.mes
tapply(Pasajeros.nacionales,Estado,sum)
library(swirl)
install.packages("swirl")
library(swirl)
library(swirl)
